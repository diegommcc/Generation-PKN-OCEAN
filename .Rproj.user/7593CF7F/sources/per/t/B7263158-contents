---
title: "03 - Testing functions on Wang model"
output: html_document
date: '2023-11-09'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
## paths
projectPath <- here::here()
dataPath <- here::here("data")
metadataPath <- here::here("metadata")
sourceCode <- here::here("src")
objectsPath <- here::here("objects", "02.Wang.Model")
reportsPath <- here::here("reports", "02.Wang.Model")
plotsPath <- here::here(reportsPath, "plots")
prefix <- "02.Wang.Model"

## scr code
# source(file.path(sourceCode, "helperFunctions.R"))

## R packages
library("XML")
library("dplyr")
library("purrr")
library("R.matlab")
library("stringr")
library("readr")
library("ggplot2")

## rmarkdown settings
knitr::opts_chunk$set(
  echo = FALSE,
  fig.align = "center",
  fig.path = file.path(reportsPath, "plots/"),
  fig.pos = "H",
  message = TRUE,
  warning = FALSE,
  comment = NA,
  dev = c("png"),
  dpi = 300
)

# source(file.path(sourceCode, "231108_final_functions.R"))

## global options
options(encoding = 'UTF-8')
```


# Mouse example

## Creating reaction network 

```{r}
metabolites.IDs.mapping.mm <- read.delim(
  file.path(dataPath, "Mouse-GEM", "model", "metabolites.tsv")
)
reactions.IDs.mapping.mm <- read.delim(
  file.path(dataPath, "Mouse-GEM", "model", "reactions.tsv")
)
```


```{r}
reaction.mm <- .create_GSMM_basal_PKN(
  matlab.path = file.path(dataPath, "Mouse-GEM/model", "Mouse-GEM.mat"),
  metabolites.map = metabolites.IDs.mapping.mm,
  metabolites.map.col = "mets",
  reactions.map = reactions.IDs.mapping.mm,
  reactions.map.col = "rxns" 
)
```

```{r}
reaction.mm[[1]] %>% head()
reaction.mm[[2]] %>% head()
```


## Removing cofactors

For removing cofactors, two steps are taken: 

1. Removing those metabolites with very high degree (already done)
2. Removing cofactors according to the BRITE info from KEGG 

```{r}
## download compund info: make available somehow
kegg.all.compunds <- readRDS(
  file.path(metadataPath, "231020_KEGG_All_Compunds", "ALL_COMPUNDS_KEGG.rds")
)
KEGG.compounds <- unlist(kegg.all.compunds, recursive = FALSE)
names(KEGG.compounds) <- sapply(KEGG.compounds, \(x) x$ENTRY)
```

```{r}
all(sapply(KEGG.compounds, \(x) !is.null(x[["BRITE"]])))
# str(KEGG.compounds[[1]])
```

```{r}
## adds an element in the list
reaction.mm.no.cof <- .remove_cofactors(
  list.network = reaction.mm, 
  KEGG.compounds = KEGG.compounds
)
```
```{r}
reaction.mm.no.cof[[1]] %>% head()
reaction.mm.no.cof[[2]] %>% head()
```

## Removing loops: condensing network (I think this should be done also for COSMOS)

```{r}
reaction.mm.no.cof.trans <- .compress_transporters(list.network = reaction.mm.no.cof)
```

## Split transaminases

Here, I have to take into account information from KEGG and use it to split transaminases. 

```{r}
reaction.mm.trans <- .split_transaminases(list.network = reaction.mm)
```

## Transforming metabolites from MetAtlas to HMDB and KEGG (at the end of the process)

```{r}
reaction.mm.transformed <- .mets_to_HMDB(reaction.mm.no.cof)
```

```{r}
# reaction.mm.transformed.cofactors <- .remove_cofactors(
#   reaction.mm.transformed
# )
```

## Final call

```{r}
## finall call 
pkn.ocean <- create_PKN_OCEAN(
  organism, ## for genes if needed it
  GSMM.matlab.path = file.path(dataPath, "Mouse-GEM/model", "Mouse-GEM.mat"),
  GSMM.reactions.map = reactions.IDs.mapping.mm,
  GSMM.metabolites.map = metabolites.IDs.mapping.mm,
  KEGG.compounds = kegg.all.compunds,
  GSMM.reactions.map.col = "rxns", 
  GSMM.metabolites.map.col = "mets",
  GSMM.list.params = list(
    stoich.name = "S",
    reaction.name = "grRules",
    lb.name = "lb",
    ub.name = "ub",
    rev.name = "rev",
    reaction.ID.name = "rxns",
    metabolites.ID.name = "mets",
    metabolites.names.name = "metNames",
    metabolites.fomulas.name = "metFormulas",
    metabolites.inchi.name = "inchis" 
  ),
  GSMM.degree.mets.threshold = 400,
  verbose = TRUE
)
```


# Human network 

## Creating reaction network 

```{r}
metabolites.IDs.mapping.hs <- read.delim(
  file.path(dataPath, "Human-GEM", "model", "metabolites.tsv")
)
reactions.IDs.mapping.hs <- read.delim(
  file.path(dataPath, "Human-GEM", "model", "reactions.tsv")
)
```


```{r}
reaction.hs <- .create_GSMM_basal_PKN(
  matlab.path = file.path(dataPath, "Human-GEM/model", "Human-GEM.mat"),
  metabolites.map = metabolites.IDs.mapping.hs,
  metabolites.map.col = "mets",
  reactions.map = reactions.IDs.mapping.hs,
  reactions.map.col = "rxns" 
)
```

```{r}
reaction.hs[[1]] %>% head()
reaction.hs[[2]] %>% head()
```

## Translate into symbol 


```{r}
list.network = reaction.hs
organism = 9606
ont.from = "ensembl_gene_id"
ont.to = "external_gene_name"
```


```{r}
library("biomaRt")
reaction.hs.mod <- .genes_to_symbol(
  list.network = reaction.hs, organism = 9606
)
```

```{r}
reaction.hs.mod
```



## Removing cofactors

For removing cofactors, two steps are taken: 

1. Removing those metabolites with very high degree (already done)
2. Removing cofactors according to the BRITE info from KEGG 

```{r}
## download compund info: make available somehow
kegg.all.compunds <- readRDS(
  file.path(metadataPath, "231020_KEGG_All_Compunds", "ALL_COMPUNDS_KEGG.rds")
)
KEGG.compounds <- unlist(kegg.all.compunds, recursive = FALSE)
names(KEGG.compounds) <- sapply(KEGG.compounds, \(x) x$ENTRY)
```

```{r}
## adds an element in the list
reaction.hs.no.cof <- .remove_cofactors(
  list.network = reaction.hs.mod, 
  KEGG.compounds = KEGG.compounds
)
```


```{r}
reaction.hs.no.cof[[1]] %>% head()
reaction.hs.no.cof[[2]] %>% head()
```

## Removing loops: condensing network (I think this should be done also for COSMOS)

```{r}
reaction.hs.no.cof.trans <- .compress_transporters(list.network = reaction.hs.no.cof)
```

## Split transaminases

Here, I have to take into account information from KEGG and use it to split transaminases. 

```{r}
reaction.hs.no.cof.trans.2 <- .split_transaminases(list.network = reaction.hs.no.cof.trans)
```

## Transforming metabolites from MetAtlas to HMDB and KEGG (at the end of the process)

```{r}
reaction.hs.transformed <- .mets_to_HMDB(reaction.hs.no.cof.trans.2)
```

```{r}
reaction.hs.transformed
```



# KEGG

KEGG.compounds was downloaded using KEGGREST. Code: 

```{r}
kegg.all.compunds <- readRDS(
  file.path(metadataPath, "231020_KEGG_All_Compunds", "ALL_COMPUNDS_KEGG.rds")
)
KEGG.compounds <- unlist(kegg.all.compunds, recursive = FALSE)
names(KEGG.compounds) <- sapply(KEGG.compounds, \(x) x$ENTRY)
```

```{r}
reaction.kegg <- metsKEGG(
  reacction.network = reaction.mm[[1]], 
  mets.map = reaction.mm[[2]],
  KEGG.compounds = KEGG.compounds
)
```

```{r}
100 - (dim(reaction.kegg[[2]])[1] / dim(reaction.mm[[2]])[1] * 100)
100 - (dim(reaction.kegg[[1]])[1] / dim(reaction.mm[[1]])[1] * 100)
```

```{r}
reacction.network <- reaction.mm[[1]]
mets.map = reaction.mm[[2]]
# names(kegg.all.compunds.1)
compounds <- unique(c(reacction.network$source, reacction.network$target))
compounds <- compounds[grepl("Metab__", x = compounds)] %>% 
  gsub(pattern = "Metab__", replace = "", x = .) %>% as.data.frame()

kegg.in.map <- mets.map$metKEGGID[!is.na(mets.map$metKEGGID)]
length(kegg.in.map)
length(names(KEGG.compounds))
sum(names(KEGG.compounds) %in% kegg.in.map)

## make a ven diagram
library("ggvenn")
list_venn <- list(
  KEGG.compounds = names(KEGG.compounds),
  KEGG.mapping = kegg.in.map
)
ggvenn(list_venn, c("KEGG.compounds", "KEGG.mapping"))

```


# Removing cofactors

```{r}
reaction.network<- reaction.kegg[[1]]
mets.map <- reaction.kegg[[2]]
mets.map.id.col = "mets"
mets.map.kegg.col = "metKEGGID"
```


```{r}
dim(reaction.kegg[[1]])
dim(unique(reaction.kegg[[1]]))
```

```{r}
reaction.kegg.no.cof <- removeCofactors(
  reaction.network = reaction.kegg[[1]], 
  mets.map = reaction.kegg[[2]],
  KEGG.compounds = KEGG.compounds,
  mets.map.kegg.col = "metKEGGID"
)
```

check Gene261__Rrm1_Rrm2_Rrm2b_Txn2

# Saving networks 

```{r}
saveRDS(reaction.kegg.no.cof, file = file.path(dataPath, "mouse.reaction.kegg.no.cof.rds"))
saveRDS(reaction.kegg, file = file.path(dataPath, "mouse.reaction.kegg.rds"))
saveRDS(reaction.mm, file = file.path(dataPath, "mouse.reaction.mm.rds"))
```



# Removing loops and split transaminases [talk to Aurelien]

```{r}
reaction.network <- reaction.kegg.no.cof[[1]]
```

```{r}
## here I don't remove compartment information because I odn't have it. Should I? 
test.1 <- paste(reaction.network$source, reaction.network$target, sep = "_")
test.2 <- paste(reaction.network$target, reaction.network$source, sep = "_")
transporters <- unique(
  c(reaction.network[test.1 %in% test.2, 1], 
    reaction.network[test.1 %in% test.2, 2])
)
# transporters <- transporters[!grepl("_[cxrnme]$", transporters)]
```

```{r}
reaction.network
```


```{r}
sapply(reaction.network.t, \(x) x %in% transporters)
```


```{r}
reaction.network[reaction.network$source == "Gene2250__Slc25a29", ]
reaction.network.t[50681, ]
```

```{r}
reaction.network.t <- reaction.network
reaction.network.t[sapply(reaction.network.t, \(x) x %in% transporters)] <- "transporter"
reaction.network.t$edgeId <- paste(
  reaction.network.t$source,
  reaction.network.t$target, 
  sep = "_"
)
```


```{r}
reaction.network.t <- reaction.network.t[!duplicated(reaction.network.t$edgeId), ]
edge_transporter <- reaction.network.t$edgeId
edge_transporter <- edge_transporter[grepl("transporter", edge_transporter)]
```

```{r}
## no idea what this does
groups <- rep(0, length(edge_transporter))
metab_memory <- c()
for (i in 1:length(edge_transporter)) {
  if (!grepl("^Gene\\d+__", edge_transporter[i])) {
    metab <- gsub("_.*", "", edge_transporter[i])
    if (!metab %in% metab_memory) {
      metab_memory[i] <- metab
      for (j in 1:length(edge_transporter)) {
        if (grepl(metab, edge_transporter[j])) {
          groups[j] <- i
        }
      }
    }
  }
}
names(groups) <- edge_transporter
```

This part does not work because it requieres some code from the previous one. Therefore, I have to talk to Aurelien about this. 

```{r}
network <- reaction.network.t
for (i in 1:2) {
  for (j in 1:length(network[, i])) {
    if (network[j, i] == "transporter") {
      # print(network[j, 3])
      network[j, i] <- paste(network[j, i], groups[network[j, 3]], sep = ">")
    }
  }
}
network <- network[!grepl("^SLC", network$edgeId) & !grepl("_SLC", network$edgeId), ]
sub_network_nocofact$reaction_network <- network[, -3]
sub_network_nocofact$attributes <- sub_network_nocofact$attributes[sub_network_nocofact$attributes[, 1] %in% network[, 1] | 
                                                                     sub_network_nocofact$attributes[, 1] %in% network[, 2], ]
new_transporters <- unique(c(network[, 1], network[, 2]))
new_transporters <- new_transporters[grepl("transporter", 
                                           new_transporters)]
new_transporters <- as.data.frame(cbind(new_transporters, 
                                        rep("transporter", length(new_transporters))))
names(new_transporters) <- c("V1", "V2")
sub_network_nocofact$attributes <- as.data.frame(rbind(sub_network_nocofact$attributes, 
                                                       new_transporters))
# sub_network_nocofact
```



